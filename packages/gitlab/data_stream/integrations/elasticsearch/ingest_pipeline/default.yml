---
description: Pipeline for normalizing GitLab api_json.log
processors:
  - rename:
      field: message
      target_field: event.original
  - json:
      field: event.original
      target_field: json
  - set:
      field: event.ingested
      value: "{{_ingest.timestamp}}"
  - set:
      field: ecs.version
      value: '1.12.0'
  - set:
      field: event.category
      value: web
  - set:
      field: event.kind
      value: event
  - date:
      field: json.time
      formats:
        - ISO8601
  - rename:
      field: json.severity
      target_field: log.level
      ignore_missing: true
  - convert:
      field: json.project_id
      target_field: gitlab.project.id
      type: string
      ignore_missing: true
  - grok:
      field: json.project_path
      patterns:
        - '^%{PROJECT_PATH:gitlab.project.path}$'
      ignore_failure: true
      pattern_definitions:
        PROJECT_PATH: '%{DATA}/%{SPACE}?%{DATA:gitlab.project.name}'
  - rename:
      field: json.message
      target_field: message
      ignore_missing: true
  - rename:
      field: json.client_url
      target_field: gitlab.integrations.client_url
      ignore_missing: true
  - uri_parts:
      field: gitlab.integrations.client_url
      target_field: url
      if: ctx?.gitlab?.integrations?.client_url != null
  - rename:
      field: json.error
      target_field: gitlab.integrations.error
      ignore_missing: true
  - set:
      field: event.outcome
      value: failure
      if: ctx?.gitlab?.integrations?.error != null
  - append:
      field: event.type
      value: error
      if: ctx?.gitlab?.integrations?.error != null
  - remove:
      field:
        - json
      ignore_missing: true
  - script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
          map.values().removeIf(v -> v == null);
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - remove:
      field:
        - json
      ignore_missing: true
  - set:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"
